/*
 * ARM Limited (ARM) is supplying this software for use with Cortex-M
 * processor based microcontroller, but can be equally used for other
 * suitable processor architectures. This file can be freely distributed.
 * Modifications to this file shall be clearly marked.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     output/MEC1753_QSZ.h
 * @brief    CMSIS HeaderFile
 * @version  1.2
 * @date     23. January 2024
 * @note     Generated by SVDConv V3.3.42 on Tuesday, 23.01.2024 16:26:58
 *           from File 'output/MEC1753_QSZ.svd',
 *
 * MEC1753 information
 * Copyright (c) 2024 Microchip Technology Inc. and its subsidiaries.
 */



/** @addtogroup Microchip Technolgy Inc.
  * @{
  */


/** @addtogroup MEC1753_QSZ
  * @{
  */


#ifndef MEC1753_QSZ_H
#define MEC1753_QSZ_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M4 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ========================================  MEC1753_QSZ Specific Interrupt Numbers  ========================================= */
  GIRQ08_IRQn               =   0,              /*!< 0  ECIA Aggregated GIRQ 08                                                */
  GIRQ09_IRQn               =   1,              /*!< 1  ECIA Aggregated GIRQ 09                                                */
  GIRQ10_IRQn               =   2,              /*!< 2  ECIA Aggregated GIRQ 10                                                */
  GIRQ11_IRQn               =   3,              /*!< 3  ECIA Aggregated GIRQ 11                                                */
  GIRQ12_IRQn               =   4,              /*!< 4  ECIA Aggregated GIRQ 12                                                */
  GIRQ13_IRQn               =   5,              /*!< 5  ECIA Aggregated GIRQ 13                                                */
  GIRQ14_IRQn               =   6,              /*!< 6  ECIA Aggregated GIRQ 14                                                */
  GIRQ15_IRQn               =   7,              /*!< 7  ECIA Aggregated GIRQ 15                                                */
  GIRQ16_IRQn               =   8,              /*!< 8  ECIA Aggregated GIRQ 16                                                */
  GIRQ17_IRQn               =   9,              /*!< 9  ECIA Aggregated GIRQ 17                                                */
  GIRQ18_IRQn               =  10,              /*!< 10 ECIA Aggregated GIRQ 18                                                */
  GIRQ19_IRQn               =  11,              /*!< 11 ECIA Aggregated GIRQ 19                                                */
  GIRQ20_IRQn               =  12,              /*!< 12 ECIA Aggregated GIRQ 20                                                */
  GIRQ21_IRQn               =  13,              /*!< 13 ECIA Aggregated GIRQ 21                                                */
  GIRQ23_IRQn               =  14,              /*!< 14 ECIA Aggregated GIRQ 23                                                */
  GIRQ24_IRQn               =  15,              /*!< 15 ECIA Aggregated GIRQ 24                                                */
  GIRQ25_IRQn               =  16,              /*!< 16 ECIA Aggregated GIRQ 25                                                */
  GIRQ26_IRQn               =  17,              /*!< 17 ECIA Aggregated GIRQ 26                                                */
  I2C_SMB0_IRQn             =  20,              /*!< 20 I2C_SMB0 interrupt                                                     */
  I2C_SMB1_IRQn             =  21,              /*!< 21 I2C_SMB1 interrupt                                                     */
  I2C_SMB2_IRQn             =  22,              /*!< 22 I2C_SMB2 interrupt                                                     */
  I2C_SMB3_IRQn             =  23,              /*!< 23 I2C_SMB3 interrupt                                                     */
  DMA_CH00_IRQn             =  24,              /*!< 24 DMA Channel 0 interrupt                                                */
  DMA_CH01_IRQn             =  25,              /*!< 25 DMA Channel 1 interrupt                                                */
  DMA_CH02_IRQn             =  26,              /*!< 26 DMA Channel 2 interrupt                                                */
  DMA_CH03_IRQn             =  27,              /*!< 27 DMA Channel 3 interrupt                                                */
  DMA_CH04_IRQn             =  28,              /*!< 28 DMA Channel 4 interrupt                                                */
  DMA_CH05_IRQn             =  29,              /*!< 29 DMA Channel 5 interrupt                                                */
  DMA_CH06_IRQn             =  30,              /*!< 30 DMA Channel 6 interrupt                                                */
  DMA_CH07_IRQn             =  31,              /*!< 31 DMA Channel 7 interrupt                                                */
  DMA_CH08_IRQn             =  32,              /*!< 32 DMA Channel 8 interrupt                                                */
  DMA_CH09_IRQn             =  33,              /*!< 33 DMA Channel 9 interrupt                                                */
  DMA_CH10_IRQn             =  34,              /*!< 34 DMA Channel 10 interrupt                                               */
  DMA_CH11_IRQn             =  35,              /*!< 35 DMA Channel 11 interrupt                                               */
  DMA_CH12_IRQn             =  36,              /*!< 36 DMA Channel 12 interrupt                                               */
  DMA_CH13_IRQn             =  37,              /*!< 37 DMA Channel 13 interrupt                                               */
  DMA_CH14_IRQn             =  38,              /*!< 38 DMA Channel 14 interrupt                                               */
  DMA_CH15_IRQn             =  39,              /*!< 39 DMA Channel 15 interrupt                                               */
  UART0_IRQn                =  40,              /*!< 40 UART 0 interrupt                                                       */
  UART1_IRQn                =  41,              /*!< 41 UART 1 interrupt                                                       */
  EMI0_IRQn                 =  42,              /*!< 42 EMI 0 interrupt                                                        */
  EMI1_IRQn                 =  43,              /*!< 43 EMI 1 interrupt                                                        */
  EMI2_IRQn                 =  44,              /*!< 44 EMI 2 interrupt                                                        */
  ACPI_EC0_IBF_IRQn         =  45,              /*!< 45 ACPI EC 0 IBF interrupt                                                */
  ACPI_EC0_OBE_IRQn         =  46,              /*!< 46 ACPI EC 0 OBE interrupt                                                */
  ACPI_EC1_IBF_IRQn         =  47,              /*!< 47 ACPI EC 1 IBF interrupt                                                */
  ACPI_EC1_OBE_IRQn         =  48,              /*!< 48 ACPI EC 1 OBE interrupt                                                */
  ACPI_EC2_IBF_IRQn         =  49,              /*!< 49 ACPI EC 2 IBF interrupt                                                */
  ACPI_EC2_OBE_IRQn         =  50,              /*!< 50 ACPI EC 2 OBE interrupt                                                */
  ACPI_EC3_IBF_IRQn         =  51,              /*!< 51 ACPI EC 3 IBF interrupt                                                */
  ACPI_EC3_OBE_IRQn         =  52,              /*!< 52 ACPI EC 3 OBE interrupt                                                */
  ACPI_EC4_IBF_IRQn         =  53,              /*!< 53 ACPI EC 4 IBF interrupt                                                */
  ACPI_EC4_OBE_IRQn         =  54,              /*!< 54 ACPI EC 4 OBE interrupt                                                */
  ACPI_PM1_CTL_IRQn         =  55,              /*!< 55 ACPI PM1 0 control interrupt                                           */
  ACPI_PM1_EN_IRQn          =  56,              /*!< 56 ACPI PM1 0 enable interrupt                                            */
  ACPI_PM1_STS_IRQn         =  57,              /*!< 57 ACPI PM1 0 status interrupt                                            */
  KBC0_OBE_IRQn             =  58,              /*!< 58 KBC 0 output buffer empty interrupt                                    */
  KBC0_IBF_IRQn             =  59,              /*!< 59 KBC 0 input buffer full interrupt                                      */
  MBOX0_IRQn                =  60,              /*!< 60 Mailbox 0 interrupt                                                    */
  BDP0_IRQn                 =  62,              /*!< 62 BDP 0 interrupt                                                        */
  PECI0_IRQn                =  70,              /*!< 70 PECI0 interrupt                                                        */
  TACH0_IRQn                =  71,              /*!< 71 TACH 0 interrupt                                                       */
  TACH1_IRQn                =  72,              /*!< 72 TACH 1 interrupt                                                       */
  TACH2_IRQn                =  73,              /*!< 73 TACH 2 interrupt                                                       */
  RPMFAN0_FAIL_IRQn         =  74,              /*!< 74 RPMFAN 0 fail interrupt                                                */
  RPMFAN0_STALL_IRQn        =  75,              /*!< 75 RPMFAN 0 stall interrupt                                               */
  RPMFAN1_FAIL_IRQn         =  76,              /*!< 76 RPMFAN 1 fail interrupt                                                */
  RPMFAN1_STALL_IRQn        =  77,              /*!< 77 RPMFAN 1 stall interrupt                                               */
  ADC0_SGL_IRQn             =  78,              /*!< 78 ADC Single(one-shot) conversion done interrupt                         */
  ADC0_RPT_IRQn             =  79,              /*!< 79 ADC Repeat conversion done interrupt                                   */
  RCID0_IRQn                =  80,              /*!< 80 RC-ID 0 interrupt                                                      */
  RCID1_IRQn                =  81,              /*!< 81 RC-ID 1 interrupt                                                      */
  RCID2_IRQn                =  82,              /*!< 82 RC-ID 2 interrupt                                                      */
  LED0_IRQn                 =  83,              /*!< 83 LED0 interrupt                                                         */
  LED1_IRQn                 =  84,              /*!< 84 LED1 interrupt                                                         */
  LED2_IRQn                 =  85,              /*!< 85 LED2 interrupt                                                         */
  LED3_IRQn                 =  86,              /*!< 86 LED3 interrupt                                                         */
  PHOT_IRQn                 =  87,              /*!< 87 PROCHOT interrupt                                                      */
  QSPI0_IRQn                =  91,              /*!< 91 QSPI0 controller interrupt                                             */
  GSPI0_IRQn                =  92,              /*!< 92 GSPI v2 instance 0 interrupt                                           */
  GSPI1_IRQn                =  94,              /*!< 94 GSPI v2 instance 1 interrupt                                           */
  BCL0_ERR_IRQn             =  96,              /*!< 96 BC-Link 0 error interrupt                                              */
  BCL0_BCLR_IRQn            =  97,              /*!< 97 BC-Link 0 busy clear interrupt                                         */
  PS2CTRL0_ACT_IRQn         = 100,              /*!< 100  PS2CTRL0 Active interrupt                                            */
  PS2CTRL1_ACT_IRQn         = 101,              /*!< 101  PS2CTRL1 Active interrupt                                            */
  ESPI_PC_IRQn              = 103,              /*!< 103  eSPI IO Peripheral Channel interrupt                                 */
  ESPI_BM1_IRQn             = 104,              /*!< 104  eSPI IO Bus Master 1 interrupt                                       */
  ESPI_BM2_IRQn             = 105,              /*!< 105  eSPI IO Bus Master 2 interrupt                                       */
  ESPI_LTR_IRQn             = 106,              /*!< 106  eSPI IO LTR interrupt                                                */
  ESPI_OOB_UP_IRQn          = 107,              /*!< 107  eSPI IO OOB channel upstream transfer interrupt                      */
  ESPI_OOB_DN_IRQn          = 108,              /*!< 108  eSPI IO OOB channel downstream transfer interrupt                    */
  ESPI_FC_IRQn              = 109,              /*!< 109  eSPI IO Flash channel interrupt                                      */
  ESPI_RST_IRQn             = 110,              /*!< 110  eSPI IO Edge detected on ESPI_RESET signal                           */
  RTMR0_IRQn                = 111,              /*!< 111  RTOS Timer 0 interrupt                                               */
  HTMR0_IRQn                = 112,              /*!< 112  Hibernation timer 0 interrupt                                        */
  HTMR1_IRQn                = 113,              /*!< 113  Hibernation timer 1 interrupt                                        */
  WKTMR0_ALARM_IRQn         = 114,              /*!< 114  Week timer 0 alarm interrupt                                         */
  WKTMR0_SUBWK_IRQn         = 115,              /*!< 115  Week timer 0 sub-week alarm interrupt                                */
  WKTMR0_ONESEC_IRQn        = 116,              /*!< 116  Week timer 0 one second alarm interrupt                              */
  WKTMR0_SUBSEC_IRQn        = 117,              /*!< 117  Week timer 0 sub-second alarm interrupt                              */
  WKTMR0_PWR_IRQn           = 118,              /*!< 118  Week timer 0 sys power present interrupt                             */
  RTC_CLK_IRQn              = 119,              /*!< 119  RTC 0 clock interrupt                                                */
  RTC_ALARM_IRQn            = 120,              /*!< 120  RTC 0 alarm interrupt                                                */
  VCI_OVRD_IN_IRQn          = 121,              /*!< 121  VCI0 override in interrupt                                           */
  VCI_IN0_IRQn              = 122,              /*!< 122  VCI0 IN0 interrupt                                                   */
  VCI_IN1_IRQn              = 123,              /*!< 123  VCI0 IN1 interrupt                                                   */
  VCI_IN2_IRQn              = 124,              /*!< 124  VCI0 IN2 interrupt                                                   */
  VCI_IN3_IRQn              = 125,              /*!< 125  VCI0 IN3 interrupt                                                   */
  PS2CTRL0_WK0A_IRQn        = 129,              /*!< 129  PS2CTRL0 Wake 0A start bit detected interrupt                        */
  PS2CTRL0_WK0B_IRQn        = 130,              /*!< 130  PS2CTRL0 Wake 0B start bit detected interrupt                        */
  PS2CTRL1_WK1B_IRQn        = 132,              /*!< 132  PS2CTRL1 Wake 0B start bit detected interrupt                        */
  KSCAN_INT_IRQn            = 135,              /*!< 135  KSCAN interrupt                                                      */
  BTMR0_IRQn                = 136,              /*!< 136  Basic Timer 0 interrupt                                              */
  BTMR1_IRQn                = 137,              /*!< 137  Basic Timer 1 interrupt                                              */
  BTMR2_IRQn                = 138,              /*!< 138  Basic Timer 2 interrupt                                              */
  BTMR3_IRQn                = 139,              /*!< 139  Basic Timer 3 interrupt                                              */
  BTMR4_IRQn                = 140,              /*!< 140  Basic Timer 4 interrupt                                              */
  BTMR5_IRQn                = 141,              /*!< 141  Basic Timer 5 interrupt                                              */
  CTMR0_IRQn                = 142,              /*!< 142  Counter-Timer 0 interrupt                                            */
  CTMR1_IRQn                = 143,              /*!< 143  16-bit Event Counter/Timer 1 interrupt                               */
  CTMR2_IRQn                = 144,              /*!< 144  16-bit Event Counter/Timer 2 interrupt                               */
  CTMR3_IRQn                = 145,              /*!< 145  16-bit Event Counter/Timer 3 interrupt                               */
  CCT_TMR_IRQn              = 146,              /*!< 146  Capture and compare timer interrupt                                  */
  CCT_CAP0_IRQn             = 147,              /*!< 147  Capture and compare timer capture 0 interrupt                        */
  CCT_CAP1_IRQn             = 148,              /*!< 148  Capture and compare timer capture 1 interrupt                        */
  CCT_CAP2_IRQn             = 149,              /*!< 149  Capture and compare timer capture 2 interrupt                        */
  CCT_CAP3_IRQn             = 150,              /*!< 150  Capture and compare timer capture 3 interrupt                        */
  CCT_CAP4_IRQn             = 151,              /*!< 151  Capture and compare timer capture 4 interrupt                        */
  CCT_CAP5_IRQn             = 152,              /*!< 152  Capture and compare timer capture 5 interrupt                        */
  CCT_CMP0_IRQn             = 153,              /*!< 153  Capture and compare timer compare 0 interrupt                        */
  CCT_CMP1_IRQn             = 154,              /*!< 154  Capture and compare timer compare 1 interrupt                        */
  EEPROM_CTRL0_IRQn         = 155,              /*!< 155  EEPROM Controller 0 interrupt                                        */
  ESPI_VWEN_IRQn            = 156,              /*!< 156  eSPI IO Virtual Wire channel enable change interrupt                 */
  I2C_SMB4_IRQn             = 158,              /*!< 158  I2C_SMB4 interrupt                                                   */
  TACH3_IRQn                = 159,              /*!< 159  TACH 3 interrupt                                                     */
  ESPI_TAF_DONE_IRQn        = 166,              /*!< 166  eSPI TAF Done interrupt                                              */
  ESPI_TAF_ERR_IRQn         = 167,              /*!< 167  eSPI TAF Error interrupt                                             */
  WDT0_IRQn                 = 171,              /*!< 171  Watch Dog timer 0 interrupt                                          */
  GLUE_IRQn                 = 172,              /*!< 172  Glue logic interrupt                                                 */
  PCR_CLKMON_IRQn           = 174,              /*!< 174  PCR 32KHz clock monitor                                              */
  ACPI_EC0_IRQn             = 175,              /*!< 175  ACPI EC 0 combined interrupt. No GIRQ                                */
  ACPI_EC1_IRQn             = 176,              /*!< 176  ACPI EC 1 combined interrupt. No GIRQ                                */
  ACPI_EC2_IRQn             = 177,              /*!< 177  ACPI EC 2 combined interrupt. No GIRQ                                */
  ACPI_EC3_IRQn             = 178,              /*!< 178  ACPI EC 3 combined interrupt. No GIRQ                                */
  ACPI_EC4_IRQn             = 179,              /*!< 179  ACPI EC 4 combined interrupt. No GIRQ                                */
  ACPI_PM1_IRQn             = 180,              /*!< 180  ACPI PM1 combined interrupt. No GIRQ                                 */
  I3C_HOST0_IRQn            = 181,              /*!< 181  I3C_HOST0 interrupt                                                  */
  I3C_SEC0_IRQn             = 182,              /*!< 182  I3C_SEC0 interrupt                                                   */
  UART2_IRQn                = 183,              /*!< 183  UART 2 interrupt                                                     */
  UART3_IRQn                = 184,              /*!< 184  UART 3 interrupt                                                     */
  USB_EP0_IRQn              = 192,              /*!< 192  USB Endpoint 0 interrupt                                                  */
  BRT0_IRQn                 = 193,              /*!< 193  Boot-ROM Watch Dog timer 0 interrupt                                 */
  DMA_CH16_IRQn             = 194,              /*!< 194  DMA Channel 16 interrupt                                             */
  DMA_CH17_IRQn             = 195,              /*!< 195  DMA Channel 17 interrupt                                             */
  DMA_CH18_IRQn             = 196,              /*!< 196  DMA Channel 18 interrupt                                             */
  DMA_CH19_IRQn             = 197               /*!< 197  DMA Channel 19 interrupt                                             */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M4 Processor and Core Peripherals  =========================== */
#define __CM4_REV                 0x0201U       /*!< CM4 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  1        /*!< FPU present                                                               */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm4.h"                           /*!< ARM Cortex-M4 processor and core peripherals                              */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif

#include <common/mec5_acpi_ec_v1.h>
#include <common/mec5_acpi_pm1_v1.h>
#include <common/mec5_adc_v2.h>
#include <common/mec5_bbled_v1.h>
#include <common/mec5_bcl_v1.h>
#include <common/mec5_bdp_v1.h>
#include <common/mec5_btmr_v1.h>
#include <common/mec5_cct_v1_1.h>
#include <common/mec5_chip_cfg_v1_2.h>
#include <common/mec5_cpu_stall_v1.h>
#include <common/mec5_ctmr_v1.h>
#include <common/mec5_dmac_ch20_v2.h>
#include <common/mec5_ecia_v1_5.h>
#include <common/mec5_ecs_v2_5.h>
#include <common/mec5_eeprom_ctrl_v1.h>
#include <common/mec5_emi_v2.h>
#include <common/mec5_espi_io_v1_5.h>
#include <common/mec5_espi_mem_v1_5.h>
#include <common/mec5_espi_taf_v1_5.h>
#include <common/mec5_espi_vw_v1_5.h>
#include <common/mec5_gluelog_v1.h>
#include <common/mec5_gpio_8f_6port_v1_5.h>
#include <common/mec5_gspi_v2.h>
#include <common/mec5_htmr_v1.h>
#include <common/mec5_i2c_smb_v3_7.h>
#include <common/mec5_i3c_host_v2.h>
#include <common/mec5_i3c_sec_v2.h>
#include <common/mec5_kbc_v1.h>
#include <common/mec5_kscan_v1.h>
#include <common/mec5_mbox_v1.h>
#include <common/mec5_pcr_v2_1.h>
#include <common/mec5_peci_v1.h>
#include <common/mec5_port92_v1.h>
#include <common/mec5_prochot_v1.h>
#include <common/mec5_ps2_v1.h>
#include <common/mec5_pwm_v1.h>
#include <common/mec5_qspi_v2_1.h>
#include <common/mec5_rcid_v1.h>
#include <common/mec5_rpmfan_v1.h>
#include <common/mec5_rtc_v1.h>
#include <common/mec5_rtmr_v1.h>
#include <common/mec5_tach_v1.h>
#include <common/mec5_tfdp_v1.h>
#include <common/mec5_uart_v1_5.h>
#include <common/mec5_usb_ep_v2.h>
#include <common/mec5_vbat_mem_128b_v1.h>
#include <common/mec5_vbatr_v1_5.h>
#include <common/mec5_vci_v1.h>
#include <common/mec5_wdt_v2.h>
#include <common/mec5_wktmr_bgpo_v1.h>

/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define CPU_STALL_BASE              0x08000000UL
#define WDT0_BASE                   0x40000400UL
#define BRT0_BASE                   0x40000420UL
#define BTMR0_BASE                  0x40000C00UL
#define BTMR1_BASE                  0x40000C20UL
#define BTMR2_BASE                  0x40000C40UL
#define BTMR3_BASE                  0x40000C60UL
#define BTMR4_BASE                  0x40000C80UL
#define BTMR5_BASE                  0x40000CA0UL
#define CTMR0_BASE                  0x40000D00UL
#define CTMR1_BASE                  0x40000D20UL
#define CTMR2_BASE                  0x40000D40UL
#define CTMR3_BASE                  0x40000D60UL
#define CCT_BASE                    0x40001000UL
#define RCID0_BASE                  0x40001400UL
#define RCID1_BASE                  0x40001480UL
#define RCID2_BASE                  0x40001500UL
#define DMAC_BASE                   0x40002400UL
#define EEPROM_CTRL0_BASE           0x40002C00UL
#define PROCHOT_BASE                0x40003400UL
#define I2C_SMB0_BASE               0x40004000UL
#define I2C_SMB1_BASE               0x40004400UL
#define I2C_SMB2_BASE               0x40004800UL
#define I2C_SMB3_BASE               0x40004C00UL
#define I2C_SMB4_BASE               0x40005000UL
#define PWM0_BASE                   0x40005800UL
#define PWM1_BASE                   0x40005810UL
#define PWM2_BASE                   0x40005820UL
#define PWM3_BASE                   0x40005830UL
#define PWM4_BASE                   0x40005840UL
#define PWM5_BASE                   0x40005850UL
#define PWM6_BASE                   0x40005860UL
#define PWM7_BASE                   0x40005870UL
#define PWM8_BASE                   0x40005880UL
#define TACH0_BASE                  0x40006000UL
#define TACH1_BASE                  0x40006010UL
#define TACH2_BASE                  0x40006020UL
#define TACH3_BASE                  0x40006030UL
#define PECI0_BASE                  0x40006400UL
#define RTMR0_BASE                  0x40007400UL
#define ADC0_BASE                   0x40007C00UL
#define USB_EP0_BASE                0x40007800UL
#define TFDP0_BASE                  0x40008C00UL
#define PS2CTRL0_BASE               0x40009000UL
#define PS2CTRL1_BASE               0x40009040UL
#define GSPI0_BASE                  0x40009400UL
#define GSPI1_BASE                  0x40009480UL
#define HTMR0_BASE                  0x40009800UL
#define HTMR1_BASE                  0x40009820UL
#define KSCAN0_BASE                 0x40009C00UL
#define RPMFAN0_BASE                0x4000A000UL
#define RPMFAN1_BASE                0x4000A080UL
#define VBATR_BASE                  0x4000A400UL
#define VBATM_BASE                  0x4000A800UL
#define WKTMR0_BASE                 0x4000AC80UL
#define VCI_BASE                    0x4000AE00UL
#define BBLED0_BASE                 0x4000B800UL
#define BBLED1_BASE                 0x4000B900UL
#define BBLED2_BASE                 0x4000BA00UL
#define BBLED3_BASE                 0x4000BB00UL
#define BCL0_BASE                   0x4000CD00UL
#define ECIA0_BASE                  0x4000E000UL
#define ECS_BASE                    0x4000FC00UL
#define I3C_SEC0_BASE               0x40010000UL
#define I3C_HOST0_BASE              0x40010800UL
#define QSPI0_BASE                  0x40070000UL
#define PCR_BASE                    0x40080100UL
#define GPIO_BASE                   0x40081000UL
#define MBOX0_BASE                  0x400F0000UL
#define KBC0_BASE                   0x400F0400UL
#define ACPI_EC0_BASE               0x400F0800UL
#define ACPI_EC1_BASE               0x400F0C00UL
#define ACPI_EC2_BASE               0x400F1000UL
#define ACPI_EC3_BASE               0x400F1400UL
#define ACPI_EC4_BASE               0x400F1800UL
#define ACPI_PM1_BASE               0x400F1C00UL
#define PORT92_BASE                 0x400F2000UL
#define UART0_BASE                  0x400F2400UL
#define UART1_BASE                  0x400F2800UL
#define UART2_BASE                  0x400F2C00UL
#define UART3_BASE                  0x400F3000UL
#define GLUE_BASE                   0x400F3C00UL
#define EMI0_BASE                   0x400F4000UL
#define EMI1_BASE                   0x400F4400UL
#define EMI2_BASE                   0x400F4800UL
#define RTC_BASE                    0x400F5000UL
#define BDP0_BASE                   0x400F8000UL
#define CHIP_CFG_BASE               0x400FFF00UL
#define ESPI_IO_BASE                0x400F3400UL
#define ESPI_MEM_BASE               0x400F3800UL
#define ESPI_VW_BASE                0x400F9C00UL
#define ESPI_TAFCOMM_BASE           0x40071000UL
#define ESPI_TAF_BASE               0x40008000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define CPU_STALL                   ((CPU_STALL_Type*)         CPU_STALL_BASE)
#define WDT0                        ((WDT_Type*)               WDT0_BASE)
#define BRT0                        ((BRT_Type*)               BRT0_BASE)
#define BTMR0                       ((BTMR_Type*)              BTMR0_BASE)
#define BTMR1                       ((BTMR_Type*)              BTMR1_BASE)
#define BTMR2                       ((BTMR_Type*)              BTMR2_BASE)
#define BTMR3                       ((BTMR_Type*)              BTMR3_BASE)
#define BTMR4                       ((BTMR_Type*)              BTMR4_BASE)
#define BTMR5                       ((BTMR_Type*)              BTMR5_BASE)
#define CTMR0                       ((CTMR_Type*)              CTMR0_BASE)
#define CTMR1                       ((CTMR_Type*)              CTMR1_BASE)
#define CTMR2                       ((CTMR_Type*)              CTMR2_BASE)
#define CTMR3                       ((CTMR_Type*)              CTMR3_BASE)
#define CCT                         ((CCT_Type*)               CCT_BASE)
#define RCID0                       ((RCID_Type*)              RCID0_BASE)
#define RCID1                       ((RCID_Type*)              RCID1_BASE)
#define RCID2                       ((RCID_Type*)              RCID2_BASE)
#define DMAC                        ((DMA_Type*)               DMAC_BASE)
#define EEPROM_CTRL0                ((EEPROM_CTRL_Type*)       EEPROM_CTRL0_BASE)
#define PROCHOT                     ((PHOT_Type*)              PROCHOT_BASE)
#define I2C_SMB0                    ((I2C_SMB_Type*)           I2C_SMB0_BASE)
#define I2C_SMB1                    ((I2C_SMB_Type*)           I2C_SMB1_BASE)
#define I2C_SMB2                    ((I2C_SMB_Type*)           I2C_SMB2_BASE)
#define I2C_SMB3                    ((I2C_SMB_Type*)           I2C_SMB3_BASE)
#define I2C_SMB4                    ((I2C_SMB_Type*)           I2C_SMB4_BASE)
#define PWM0                        ((PWM_Type*)               PWM0_BASE)
#define PWM1                        ((PWM_Type*)               PWM1_BASE)
#define PWM2                        ((PWM_Type*)               PWM2_BASE)
#define PWM3                        ((PWM_Type*)               PWM3_BASE)
#define PWM4                        ((PWM_Type*)               PWM4_BASE)
#define PWM5                        ((PWM_Type*)               PWM5_BASE)
#define PWM6                        ((PWM_Type*)               PWM6_BASE)
#define PWM7                        ((PWM_Type*)               PWM7_BASE)
#define PWM8                        ((PWM_Type*)               PWM8_BASE)
#define TACH0                       ((TACH_Type*)              TACH0_BASE)
#define TACH1                       ((TACH_Type*)              TACH1_BASE)
#define TACH2                       ((TACH_Type*)              TACH2_BASE)
#define TACH3                       ((TACH_Type*)              TACH3_BASE)
#define PECI0                       ((PECI_Type*)              PECI0_BASE)
#define RTMR0                       ((RTMR_Type*)              RTMR0_BASE)
#define ADC0                        ((ADC_Type*)               ADC0_BASE)
#define USB_EP0                     ((USB_EP_Type*)            USB_EP0_BASE)
#define TFDP0                       ((TFDP_Type*)              TFDP0_BASE)
#define PS2CTRL0                    ((PS2_Type*)               PS2CTRL0_BASE)
#define PS2CTRL1                    ((PS2_Type*)               PS2CTRL1_BASE)
#define GSPI0                       ((GSPI_Type*)              GSPI0_BASE)
#define GSPI1                       ((GSPI_Type*)              GSPI1_BASE)
#define HTMR0                       ((HTMR_Type*)              HTMR0_BASE)
#define HTMR1                       ((HTMR_Type*)              HTMR1_BASE)
#define KSCAN0                      ((KSCAN_Type*)             KSCAN0_BASE)
#define RPMFAN0                     ((RPMFAN_Type*)            RPMFAN0_BASE)
#define RPMFAN1                     ((RPMFAN_Type*)            RPMFAN1_BASE)
#define VBATR                       ((VBATR_Type*)             VBATR_BASE)
#define VBATM                       ((VBATM_Type*)             VBATM_BASE)
#define WKTMR0                      ((WKTMR_Type*)             WKTMR0_BASE)
#define VCI                         ((VCI_Type*)               VCI_BASE)
#define BBLED0                      ((BBLED_Type*)             BBLED0_BASE)
#define BBLED1                      ((BBLED_Type*)             BBLED1_BASE)
#define BBLED2                      ((BBLED_Type*)             BBLED2_BASE)
#define BBLED3                      ((BBLED_Type*)             BBLED3_BASE)
#define BCL0                        ((BCL_Type*)               BCL0_BASE)
#define ECIA0                       ((ECIA_Type*)              ECIA0_BASE)
#define ECS                         ((ECS_Type*)               ECS_BASE)
#define I3C_SEC0                    ((I3C_SEC_Type *)          I3C_SEC0_BASE)
#define I3C_HOST0                   ((I3C_HOST_Type *)         I3C_HOST0_BASE)
#define QSPI0                       ((QSPI_Type*)              QSPI0_BASE)
#define PCR                         ((PCR_Type*)               PCR_BASE)
#define GPIO                        ((GPIO_Type*)              GPIO_BASE)
#define MBOX0                       ((MBOX_Type*)              MBOX0_BASE)
#define KBC0                        ((KBC_Type*)               KBC0_BASE)
#define ACPI_EC0                    ((ACPI_EC_Type*)           ACPI_EC0_BASE)
#define ACPI_EC1                    ((ACPI_EC_Type*)           ACPI_EC1_BASE)
#define ACPI_EC2                    ((ACPI_EC_Type*)           ACPI_EC2_BASE)
#define ACPI_EC3                    ((ACPI_EC_Type*)           ACPI_EC3_BASE)
#define ACPI_EC4                    ((ACPI_EC_Type*)           ACPI_EC4_BASE)
#define ACPI_PM1                    ((ACPI_PM1_Type*)          ACPI_PM1_BASE)
#define PORT92                      ((PORT92_Type*)            PORT92_BASE)
#define UART0                       ((UART_Type*)              UART0_BASE)
#define UART1                       ((UART_Type*)              UART1_BASE)
#define UART2                       ((UART_Type*)              UART2_BASE)
#define UART3                       ((UART_Type*)              UART3_BASE)
#define GLUE                        ((GLUE_Type*)              GLUE_BASE)
#define EMI0                        ((EMI_Type*)               EMI0_BASE)
#define EMI1                        ((EMI_Type*)               EMI1_BASE)
#define EMI2                        ((EMI_Type*)               EMI2_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define BDP0                        ((BDP_Type*)               BDP0_BASE)
#define CHIP_CFG                    ((CHIP_CFG_Type*)          CHIP_CFG_BASE)
#define ESPI_IO                     ((ESPI_IO_Type*)           ESPI_IO_BASE)
#define ESPI_MEM                    ((ESPI_MEM_Type*)          ESPI_MEM_BASE)
#define ESPI_VW                     ((ESPI_VW_Type*)           ESPI_VW_BASE)
#define ESPI_TAFCOMM                ((ESPI_TAFCOMM_Type*)      ESPI_TAFCOMM_BASE)
#define ESPI_TAF                    ((ESPI_TAF_Type*)          ESPI_TAF_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif

#ifdef __cplusplus
}
#endif

#endif /* MEC1753_QSZ_H */


/** @} */ /* End of group MEC1753_QSZ */

/** @} */ /* End of group Microchip Technolgy Inc. */
